html
  head
    title MEAN Stack Tutorial - Node.js
    link(rel = 'stylesheet', type = 'text/css', href = '/index.css')
  body
    .title MEAN Stack Tutorial
    .section Node.js
    .body.
      In this tutorial, we will cover the basics of using Node.js, along with other
      modules that work with Node.js to make web programming easy.  We assume you have a working knowledge of JavaScript,
      HTML, and CSS.  You also need to be comfortable working on the command line of your platform - all examples are given
      assuming Linux.  Mac users should have no problem, as they also use bash on the command line - Windows users will
      need to adjust as needed for the Windows command line.  We also assume you know how to create a text file suitable
      for use as a program file - <b>not</b> a word processing document!
    .body.
      The first thing to understand is that all of the coding is done in JavaScript.  There is no Java, Groovy, Python,
      Perl, or whatever - everything is JavaScript.  The next thing to realize is most of this JavaScript is run on the
      server, not in the browser (although we will run JavaScript in the browser to make our pages look nicer).
    #install.subsection Installing Node.js
    .body.
      Node.js is the foundation - it is basically a wrapper around the V8 JavaScript engine, allowing JavaScript to be run
      on the server side.  Of course, it needs to be installed before we can use it!
    .body.
      The Node.js web site is <a href='http://nodejs.org'>nodejs.org</a>, and selecting the <em>DOWNLOADS</em> tab at the
      top of the page will reveal a number of download options.  There are binary installation packages for Windows and Mac,
      and precompiled binaries for a number of other operating systems.  In any case, the source code is also available to
      be built and installed like most other open source projects:
    ul.code
      li $ .configure
      li $ make
      li $ make test
      li $ sudo make install
    .body.
      If you have <em>git</em>, <em>curl</em>, <em>openssl</em>, and the standard gcc build tools installed, another way to
      build from the source files is the following:
    ul.code
      li $ git clone https://github.com/joyent/node.git
        .code-comment This is a big download, and will create the <b>node</b> directory in the current directory.
      li $ cd node; git tag | less
        .code-comment Show the available versions - you want the latest.
      li $ git checkout <em>version</em>
      li $ ./configure --openssl-libpath=/usr/lib/ssl
        .code-comment configure doesn't always find <em>openssl</em> - make sure the path is correct.
      li $ make
        .code-comment This can take a long time - it's compiling many files.
      li $ make test
        .code-comment Runs about 800 tests and can take a while - probably OK if a few fail.
      li $ sudo make install
        .code-comment ...or run <b>make install</b> as root from same directory if sudo is not configured.
    .body.
      Whichever way you install Node.js, you should run the following commands to make sure the install is OK:
    ul.code
      li $ node -v
      li $ npm -v
    .body.
      These both should run and print the version of <b>node</b> and <b>npm</b> if everything worked and installed OK.
    #using_node.subsection Using Node.js
    .body.
      The raw Node.js does not do much - it's pretty much a wrapper around the V8 JavaScript engine.  However, it does
      provide a Read-Eval-Print-Loop (REPL) that is handy for trying out JavaScript expressions, and it can also run
      JavaScript programs in files.
    #repl.subsubsection Using the Read-Eval-Print-Loop (REPL)
    .body.
      Running <b>node</b> directly from the command line with no arguments starts up an interactive REPL session, where you
      can directly type in JavaScript commands that will be immediately executed, with the results printed out:
    ul.code
      li $ 
         b node
      li > 
        b 1 + 2
      li 3
      li > 
        b a = [1, 2, 3]
      li [ 1, 2, 3 ]
        .code-comment You can define variables.  Use <b>var</b> to prevent returning a value.
      li > 
        b a.forEach(function(v) {
      li ... 
        b console.log(v);
      li ... 
        b });
        .code-comment Node.js knows when the scope needs to be closed, and changes the prompt.
      li 1
      li 2
      li 3
      li undefined
        .code-comment After printing each of the elements, the return value is <b>undefined</b>.
      li > 
        b
          i CTRL-D
      li $
        .code-comment Use <b>CTRL-D</b> to exit the REPL.
    #scripts.subsubsection Using JavaScript Files
    .body.
      Using <b>node</b> on the command line with a file as the argument causes Node.js to treat the file as a JavaScript
      source file to be executed.  By putting the proper 'shebang' at the top of the file, an executable file can
      automatically use Node.js to execute the file - use a text editor to create the file <b>script.js</b> containing
      these two lines of code:
    ul.code
      li #!/usr/bin/env node
      li console.log(process.argv);
        .code-comment <b>process.argv</b> is a list of the command line arguments.
    .body.
      By making the new script executable, and then running it, Node.js will run the script:
    ul.code
      li $ 
        b chmod +x script.js
      li $ 
        b ./script.js Hello World
      li [ 'node',
      li &nbsp;&nbsp;'/home/johnm/node_projects/script.js',
      li &nbsp;&nbsp;'Hello',
      li &nbsp;&nbsp;'World' ]
    .body.
      Note that the arguments list starts with 'node', followed by the full path of the script, and then the command line
      arguments.  Let's change the script to print out only the provided arguments:
    ul.code
      li #!/usr/bin/env node
      li console.log(process.argv.slice(2);
      hr
      li $ 
        b ./script.js Hello World
      li [ 'Hello', 'World' ]
    .body.
      Much more information on command line script processing with Node.js is available on the web.
